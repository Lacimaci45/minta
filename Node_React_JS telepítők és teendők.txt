Node JS telepítő csomagok



API építése Sqlite adatbázis háttérrel

Hozzunk létre egy node projektet:
npm init -y

A telepítés után a package.json-ban módosítsuk a start scriptet a következőre:
 "start":"nodemon index.js"

Telepítsük a szükséges szoftvereket: Express a kiszolgáláshoz:
npm install express

Cors, hogy cross-origin kérések is rendben menjenek.
npm install cors

Nodemon, hogy ne kézzel kelljen újraindítgatni a szervert
npm install --save-dev nodemon

Sqlite 3  / vagy /  MySQL
npm install sqlite3 / vagy / npm install mysql

Cross-fetch
npm install --save cross-fetch

Rest (RESTful) API műveletek
// GET= select (adat lekérés) 
// POST = insert (új adat felvite) --> új adat estén terminálba a kliens kód nevét írni--> pl node xy.js + enter
// PUT-PATCH= update (adat módosítás) 
// DELETE=delete (adat törlés)



Süti alkalmazás Node Js alatt

npm init -y
package.json-ba írni -->  "start":"nodemon index.js"
npm install express
npm install cors
npm install --save-dev nodemon
npm install cookie-parser



Login projekt csomagok

npm init -y
npm install --save-dev nodemon
package.json:"start":"nodemon index.js"
npm install express
npm install cors
npm install mysql
npm i ejs 
npm i bcrypt 
npm i passport 
npm i express-flash  
npm i express-session
npm i passport-local



Input Validator csomagok Node Js alatt

npm init -y
npm install --save-dev nodemon
package.json:"start":"nodemon index.js"
npm install express
npm install cors
npm i --save express-validator




React JS telepítő csomagok



JSX szintaxis

Inicializáljunk egy projektet:
npm init -y

A Babel telepítése a projektbe:
npm install babel-cli@6 babel-preset-react-app@3

A telepítést követően a package.json-ba tegyük be a következő sort a scripts-be:
"dev":"npx babel --watch src --out-dir . --presets react-app/prod" 

Ezután az npm run dev parancs hatására a Babel fut és a .jsx fájl mentésekor lefordítja ezt .js-re.



Bootstrap  React alkalmazásokban:

Telepítsük a Bootstrap-et az alkalmazásunkhoz:
npm install --save bootstrap

Az index.js-be tegyük be a következőt:
import 'bootstrap/dist/css/bootstrap.css';

Innentől kezdve használhatjuk a Bootstrap stílusait az alkalmazásunkban, 
arra kell ügyelni, hogy class="stilus" helyett className="stilus" amit használni kell.

Nem csak stílusokat, hanem Bootstrap ikonokat is használhatunk, 
ebben az esetben az index.html fejlécébe tegyük a következőt:
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.1/font/bootstrap-icons.css">



Frontend React alkalmazás létező backendhez:

Telepítés (React App létrehozása):
npx create-react-app .

Bootstrap telepítése:
npm install --save bootstrap

Az index.js-be tegyük be a következőt:
import 'bootstrap/dist/css/bootstrap.css';

React-router-dom telepítése: Telepítés
npm i --save react-router-dom@5.1


Frontend Responsive rendszerek:
DaisyUI (hasonló mint Bootstrap): https://daisyui.com
TailwindCss (hasonló mint CSS): https://tailwindcss.com

React Responsive felépítése
//terminal: npx create-react-app ./ npm i react-router-dom@5.3.0
//terminal: npm install -D tailwindcss postcss autoprefixer/ npx tailwindcss init
//terminal: npm i daisyui
//index.css módosítása, postcss.config.js létrehozása, tailwind.config.js

WEBSERVER létrehozni:
//npm run build

Tailwind CSS színkódok:
https://tailwindcss.com/docs/customizing-colors


